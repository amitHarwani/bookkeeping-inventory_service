// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: src/grpc/proto/inventory_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "inventory_service";

export interface MessageResponse {
  message: string;
}

export interface ItemTypeForRecordingSale {
  unitsSold: number;
  sellingPricePerUnit: number;
  itemId: number;
}

export interface ItemTypeForRecordingPurchase {
  unitsPurchased: number;
  pricePerUnit: number;
  itemId: number;
}

export interface RecordSaleRequest {
  companyId: number;
  saleId: number;
  items: ItemTypeForRecordingSale[];
}

export interface RecordPurchaseRequest {
  companyId: number;
  purchaseId: number;
  items: ItemTypeForRecordingPurchase[];
}

export interface ItemsUpdatedInSaleUpdate {
  old: ItemTypeForRecordingSale | undefined;
  new: ItemTypeForRecordingSale | undefined;
}

export interface ItemsInSaleUpdate {
  itemsRemoved: ItemTypeForRecordingSale[];
  itemsUpdated: ItemsUpdatedInSaleUpdate[];
}

export interface RecordSaleUpdateRequest {
  companyId: number;
  saleId: number;
  items: ItemsInSaleUpdate | undefined;
}

export interface ItemsUpdatedInPurchaseUpdate {
  old: ItemTypeForRecordingPurchase | undefined;
  new: ItemTypeForRecordingPurchase | undefined;
}

export interface ItemsInPurchaseUpdate {
  itemsRemoved: ItemTypeForRecordingPurchase[];
  itemsUpdated: ItemsUpdatedInPurchaseUpdate[];
}

export interface RecordPurchaseUpdateRequest {
  companyId: number;
  purchaseId: number;
  items: ItemsInPurchaseUpdate | undefined;
}

function createBaseMessageResponse(): MessageResponse {
  return { message: "" };
}

export const MessageResponse: MessageFns<MessageResponse> = {
  encode(message: MessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: MessageResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageResponse>, I>>(base?: I): MessageResponse {
    return MessageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageResponse>, I>>(object: I): MessageResponse {
    const message = createBaseMessageResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseItemTypeForRecordingSale(): ItemTypeForRecordingSale {
  return { unitsSold: 0, sellingPricePerUnit: 0, itemId: 0 };
}

export const ItemTypeForRecordingSale: MessageFns<ItemTypeForRecordingSale> = {
  encode(message: ItemTypeForRecordingSale, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unitsSold !== 0) {
      writer.uint32(9).double(message.unitsSold);
    }
    if (message.sellingPricePerUnit !== 0) {
      writer.uint32(17).double(message.sellingPricePerUnit);
    }
    if (message.itemId !== 0) {
      writer.uint32(24).int32(message.itemId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ItemTypeForRecordingSale {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItemTypeForRecordingSale();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.unitsSold = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.sellingPricePerUnit = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.itemId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ItemTypeForRecordingSale {
    return {
      unitsSold: isSet(object.unitsSold) ? globalThis.Number(object.unitsSold) : 0,
      sellingPricePerUnit: isSet(object.sellingPricePerUnit) ? globalThis.Number(object.sellingPricePerUnit) : 0,
      itemId: isSet(object.itemId) ? globalThis.Number(object.itemId) : 0,
    };
  },

  toJSON(message: ItemTypeForRecordingSale): unknown {
    const obj: any = {};
    if (message.unitsSold !== 0) {
      obj.unitsSold = message.unitsSold;
    }
    if (message.sellingPricePerUnit !== 0) {
      obj.sellingPricePerUnit = message.sellingPricePerUnit;
    }
    if (message.itemId !== 0) {
      obj.itemId = Math.round(message.itemId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ItemTypeForRecordingSale>, I>>(base?: I): ItemTypeForRecordingSale {
    return ItemTypeForRecordingSale.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ItemTypeForRecordingSale>, I>>(object: I): ItemTypeForRecordingSale {
    const message = createBaseItemTypeForRecordingSale();
    message.unitsSold = object.unitsSold ?? 0;
    message.sellingPricePerUnit = object.sellingPricePerUnit ?? 0;
    message.itemId = object.itemId ?? 0;
    return message;
  },
};

function createBaseItemTypeForRecordingPurchase(): ItemTypeForRecordingPurchase {
  return { unitsPurchased: 0, pricePerUnit: 0, itemId: 0 };
}

export const ItemTypeForRecordingPurchase: MessageFns<ItemTypeForRecordingPurchase> = {
  encode(message: ItemTypeForRecordingPurchase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unitsPurchased !== 0) {
      writer.uint32(9).double(message.unitsPurchased);
    }
    if (message.pricePerUnit !== 0) {
      writer.uint32(17).double(message.pricePerUnit);
    }
    if (message.itemId !== 0) {
      writer.uint32(24).int32(message.itemId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ItemTypeForRecordingPurchase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItemTypeForRecordingPurchase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.unitsPurchased = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.pricePerUnit = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.itemId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ItemTypeForRecordingPurchase {
    return {
      unitsPurchased: isSet(object.unitsPurchased) ? globalThis.Number(object.unitsPurchased) : 0,
      pricePerUnit: isSet(object.pricePerUnit) ? globalThis.Number(object.pricePerUnit) : 0,
      itemId: isSet(object.itemId) ? globalThis.Number(object.itemId) : 0,
    };
  },

  toJSON(message: ItemTypeForRecordingPurchase): unknown {
    const obj: any = {};
    if (message.unitsPurchased !== 0) {
      obj.unitsPurchased = message.unitsPurchased;
    }
    if (message.pricePerUnit !== 0) {
      obj.pricePerUnit = message.pricePerUnit;
    }
    if (message.itemId !== 0) {
      obj.itemId = Math.round(message.itemId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ItemTypeForRecordingPurchase>, I>>(base?: I): ItemTypeForRecordingPurchase {
    return ItemTypeForRecordingPurchase.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ItemTypeForRecordingPurchase>, I>>(object: I): ItemTypeForRecordingPurchase {
    const message = createBaseItemTypeForRecordingPurchase();
    message.unitsPurchased = object.unitsPurchased ?? 0;
    message.pricePerUnit = object.pricePerUnit ?? 0;
    message.itemId = object.itemId ?? 0;
    return message;
  },
};

function createBaseRecordSaleRequest(): RecordSaleRequest {
  return { companyId: 0, saleId: 0, items: [] };
}

export const RecordSaleRequest: MessageFns<RecordSaleRequest> = {
  encode(message: RecordSaleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.companyId !== 0) {
      writer.uint32(8).int32(message.companyId);
    }
    if (message.saleId !== 0) {
      writer.uint32(16).int32(message.saleId);
    }
    for (const v of message.items) {
      ItemTypeForRecordingSale.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordSaleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordSaleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.companyId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.saleId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.items.push(ItemTypeForRecordingSale.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordSaleRequest {
    return {
      companyId: isSet(object.companyId) ? globalThis.Number(object.companyId) : 0,
      saleId: isSet(object.saleId) ? globalThis.Number(object.saleId) : 0,
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => ItemTypeForRecordingSale.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RecordSaleRequest): unknown {
    const obj: any = {};
    if (message.companyId !== 0) {
      obj.companyId = Math.round(message.companyId);
    }
    if (message.saleId !== 0) {
      obj.saleId = Math.round(message.saleId);
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => ItemTypeForRecordingSale.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordSaleRequest>, I>>(base?: I): RecordSaleRequest {
    return RecordSaleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordSaleRequest>, I>>(object: I): RecordSaleRequest {
    const message = createBaseRecordSaleRequest();
    message.companyId = object.companyId ?? 0;
    message.saleId = object.saleId ?? 0;
    message.items = object.items?.map((e) => ItemTypeForRecordingSale.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRecordPurchaseRequest(): RecordPurchaseRequest {
  return { companyId: 0, purchaseId: 0, items: [] };
}

export const RecordPurchaseRequest: MessageFns<RecordPurchaseRequest> = {
  encode(message: RecordPurchaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.companyId !== 0) {
      writer.uint32(8).int32(message.companyId);
    }
    if (message.purchaseId !== 0) {
      writer.uint32(16).int32(message.purchaseId);
    }
    for (const v of message.items) {
      ItemTypeForRecordingPurchase.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordPurchaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordPurchaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.companyId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.purchaseId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.items.push(ItemTypeForRecordingPurchase.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordPurchaseRequest {
    return {
      companyId: isSet(object.companyId) ? globalThis.Number(object.companyId) : 0,
      purchaseId: isSet(object.purchaseId) ? globalThis.Number(object.purchaseId) : 0,
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => ItemTypeForRecordingPurchase.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RecordPurchaseRequest): unknown {
    const obj: any = {};
    if (message.companyId !== 0) {
      obj.companyId = Math.round(message.companyId);
    }
    if (message.purchaseId !== 0) {
      obj.purchaseId = Math.round(message.purchaseId);
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => ItemTypeForRecordingPurchase.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordPurchaseRequest>, I>>(base?: I): RecordPurchaseRequest {
    return RecordPurchaseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordPurchaseRequest>, I>>(object: I): RecordPurchaseRequest {
    const message = createBaseRecordPurchaseRequest();
    message.companyId = object.companyId ?? 0;
    message.purchaseId = object.purchaseId ?? 0;
    message.items = object.items?.map((e) => ItemTypeForRecordingPurchase.fromPartial(e)) || [];
    return message;
  },
};

function createBaseItemsUpdatedInSaleUpdate(): ItemsUpdatedInSaleUpdate {
  return { old: undefined, new: undefined };
}

export const ItemsUpdatedInSaleUpdate: MessageFns<ItemsUpdatedInSaleUpdate> = {
  encode(message: ItemsUpdatedInSaleUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.old !== undefined) {
      ItemTypeForRecordingSale.encode(message.old, writer.uint32(10).fork()).join();
    }
    if (message.new !== undefined) {
      ItemTypeForRecordingSale.encode(message.new, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ItemsUpdatedInSaleUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItemsUpdatedInSaleUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.old = ItemTypeForRecordingSale.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.new = ItemTypeForRecordingSale.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ItemsUpdatedInSaleUpdate {
    return {
      old: isSet(object.old) ? ItemTypeForRecordingSale.fromJSON(object.old) : undefined,
      new: isSet(object.new) ? ItemTypeForRecordingSale.fromJSON(object.new) : undefined,
    };
  },

  toJSON(message: ItemsUpdatedInSaleUpdate): unknown {
    const obj: any = {};
    if (message.old !== undefined) {
      obj.old = ItemTypeForRecordingSale.toJSON(message.old);
    }
    if (message.new !== undefined) {
      obj.new = ItemTypeForRecordingSale.toJSON(message.new);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ItemsUpdatedInSaleUpdate>, I>>(base?: I): ItemsUpdatedInSaleUpdate {
    return ItemsUpdatedInSaleUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ItemsUpdatedInSaleUpdate>, I>>(object: I): ItemsUpdatedInSaleUpdate {
    const message = createBaseItemsUpdatedInSaleUpdate();
    message.old = (object.old !== undefined && object.old !== null)
      ? ItemTypeForRecordingSale.fromPartial(object.old)
      : undefined;
    message.new = (object.new !== undefined && object.new !== null)
      ? ItemTypeForRecordingSale.fromPartial(object.new)
      : undefined;
    return message;
  },
};

function createBaseItemsInSaleUpdate(): ItemsInSaleUpdate {
  return { itemsRemoved: [], itemsUpdated: [] };
}

export const ItemsInSaleUpdate: MessageFns<ItemsInSaleUpdate> = {
  encode(message: ItemsInSaleUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.itemsRemoved) {
      ItemTypeForRecordingSale.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.itemsUpdated) {
      ItemsUpdatedInSaleUpdate.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ItemsInSaleUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItemsInSaleUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.itemsRemoved.push(ItemTypeForRecordingSale.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.itemsUpdated.push(ItemsUpdatedInSaleUpdate.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ItemsInSaleUpdate {
    return {
      itemsRemoved: globalThis.Array.isArray(object?.itemsRemoved)
        ? object.itemsRemoved.map((e: any) => ItemTypeForRecordingSale.fromJSON(e))
        : [],
      itemsUpdated: globalThis.Array.isArray(object?.itemsUpdated)
        ? object.itemsUpdated.map((e: any) => ItemsUpdatedInSaleUpdate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ItemsInSaleUpdate): unknown {
    const obj: any = {};
    if (message.itemsRemoved?.length) {
      obj.itemsRemoved = message.itemsRemoved.map((e) => ItemTypeForRecordingSale.toJSON(e));
    }
    if (message.itemsUpdated?.length) {
      obj.itemsUpdated = message.itemsUpdated.map((e) => ItemsUpdatedInSaleUpdate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ItemsInSaleUpdate>, I>>(base?: I): ItemsInSaleUpdate {
    return ItemsInSaleUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ItemsInSaleUpdate>, I>>(object: I): ItemsInSaleUpdate {
    const message = createBaseItemsInSaleUpdate();
    message.itemsRemoved = object.itemsRemoved?.map((e) => ItemTypeForRecordingSale.fromPartial(e)) || [];
    message.itemsUpdated = object.itemsUpdated?.map((e) => ItemsUpdatedInSaleUpdate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRecordSaleUpdateRequest(): RecordSaleUpdateRequest {
  return { companyId: 0, saleId: 0, items: undefined };
}

export const RecordSaleUpdateRequest: MessageFns<RecordSaleUpdateRequest> = {
  encode(message: RecordSaleUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.companyId !== 0) {
      writer.uint32(8).int32(message.companyId);
    }
    if (message.saleId !== 0) {
      writer.uint32(16).int32(message.saleId);
    }
    if (message.items !== undefined) {
      ItemsInSaleUpdate.encode(message.items, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordSaleUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordSaleUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.companyId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.saleId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.items = ItemsInSaleUpdate.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordSaleUpdateRequest {
    return {
      companyId: isSet(object.companyId) ? globalThis.Number(object.companyId) : 0,
      saleId: isSet(object.saleId) ? globalThis.Number(object.saleId) : 0,
      items: isSet(object.items) ? ItemsInSaleUpdate.fromJSON(object.items) : undefined,
    };
  },

  toJSON(message: RecordSaleUpdateRequest): unknown {
    const obj: any = {};
    if (message.companyId !== 0) {
      obj.companyId = Math.round(message.companyId);
    }
    if (message.saleId !== 0) {
      obj.saleId = Math.round(message.saleId);
    }
    if (message.items !== undefined) {
      obj.items = ItemsInSaleUpdate.toJSON(message.items);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordSaleUpdateRequest>, I>>(base?: I): RecordSaleUpdateRequest {
    return RecordSaleUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordSaleUpdateRequest>, I>>(object: I): RecordSaleUpdateRequest {
    const message = createBaseRecordSaleUpdateRequest();
    message.companyId = object.companyId ?? 0;
    message.saleId = object.saleId ?? 0;
    message.items = (object.items !== undefined && object.items !== null)
      ? ItemsInSaleUpdate.fromPartial(object.items)
      : undefined;
    return message;
  },
};

function createBaseItemsUpdatedInPurchaseUpdate(): ItemsUpdatedInPurchaseUpdate {
  return { old: undefined, new: undefined };
}

export const ItemsUpdatedInPurchaseUpdate: MessageFns<ItemsUpdatedInPurchaseUpdate> = {
  encode(message: ItemsUpdatedInPurchaseUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.old !== undefined) {
      ItemTypeForRecordingPurchase.encode(message.old, writer.uint32(10).fork()).join();
    }
    if (message.new !== undefined) {
      ItemTypeForRecordingPurchase.encode(message.new, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ItemsUpdatedInPurchaseUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItemsUpdatedInPurchaseUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.old = ItemTypeForRecordingPurchase.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.new = ItemTypeForRecordingPurchase.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ItemsUpdatedInPurchaseUpdate {
    return {
      old: isSet(object.old) ? ItemTypeForRecordingPurchase.fromJSON(object.old) : undefined,
      new: isSet(object.new) ? ItemTypeForRecordingPurchase.fromJSON(object.new) : undefined,
    };
  },

  toJSON(message: ItemsUpdatedInPurchaseUpdate): unknown {
    const obj: any = {};
    if (message.old !== undefined) {
      obj.old = ItemTypeForRecordingPurchase.toJSON(message.old);
    }
    if (message.new !== undefined) {
      obj.new = ItemTypeForRecordingPurchase.toJSON(message.new);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ItemsUpdatedInPurchaseUpdate>, I>>(base?: I): ItemsUpdatedInPurchaseUpdate {
    return ItemsUpdatedInPurchaseUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ItemsUpdatedInPurchaseUpdate>, I>>(object: I): ItemsUpdatedInPurchaseUpdate {
    const message = createBaseItemsUpdatedInPurchaseUpdate();
    message.old = (object.old !== undefined && object.old !== null)
      ? ItemTypeForRecordingPurchase.fromPartial(object.old)
      : undefined;
    message.new = (object.new !== undefined && object.new !== null)
      ? ItemTypeForRecordingPurchase.fromPartial(object.new)
      : undefined;
    return message;
  },
};

function createBaseItemsInPurchaseUpdate(): ItemsInPurchaseUpdate {
  return { itemsRemoved: [], itemsUpdated: [] };
}

export const ItemsInPurchaseUpdate: MessageFns<ItemsInPurchaseUpdate> = {
  encode(message: ItemsInPurchaseUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.itemsRemoved) {
      ItemTypeForRecordingPurchase.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.itemsUpdated) {
      ItemsUpdatedInPurchaseUpdate.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ItemsInPurchaseUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItemsInPurchaseUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.itemsRemoved.push(ItemTypeForRecordingPurchase.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.itemsUpdated.push(ItemsUpdatedInPurchaseUpdate.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ItemsInPurchaseUpdate {
    return {
      itemsRemoved: globalThis.Array.isArray(object?.itemsRemoved)
        ? object.itemsRemoved.map((e: any) => ItemTypeForRecordingPurchase.fromJSON(e))
        : [],
      itemsUpdated: globalThis.Array.isArray(object?.itemsUpdated)
        ? object.itemsUpdated.map((e: any) => ItemsUpdatedInPurchaseUpdate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ItemsInPurchaseUpdate): unknown {
    const obj: any = {};
    if (message.itemsRemoved?.length) {
      obj.itemsRemoved = message.itemsRemoved.map((e) => ItemTypeForRecordingPurchase.toJSON(e));
    }
    if (message.itemsUpdated?.length) {
      obj.itemsUpdated = message.itemsUpdated.map((e) => ItemsUpdatedInPurchaseUpdate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ItemsInPurchaseUpdate>, I>>(base?: I): ItemsInPurchaseUpdate {
    return ItemsInPurchaseUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ItemsInPurchaseUpdate>, I>>(object: I): ItemsInPurchaseUpdate {
    const message = createBaseItemsInPurchaseUpdate();
    message.itemsRemoved = object.itemsRemoved?.map((e) => ItemTypeForRecordingPurchase.fromPartial(e)) || [];
    message.itemsUpdated = object.itemsUpdated?.map((e) => ItemsUpdatedInPurchaseUpdate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRecordPurchaseUpdateRequest(): RecordPurchaseUpdateRequest {
  return { companyId: 0, purchaseId: 0, items: undefined };
}

export const RecordPurchaseUpdateRequest: MessageFns<RecordPurchaseUpdateRequest> = {
  encode(message: RecordPurchaseUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.companyId !== 0) {
      writer.uint32(8).int32(message.companyId);
    }
    if (message.purchaseId !== 0) {
      writer.uint32(16).int32(message.purchaseId);
    }
    if (message.items !== undefined) {
      ItemsInPurchaseUpdate.encode(message.items, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordPurchaseUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordPurchaseUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.companyId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.purchaseId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.items = ItemsInPurchaseUpdate.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordPurchaseUpdateRequest {
    return {
      companyId: isSet(object.companyId) ? globalThis.Number(object.companyId) : 0,
      purchaseId: isSet(object.purchaseId) ? globalThis.Number(object.purchaseId) : 0,
      items: isSet(object.items) ? ItemsInPurchaseUpdate.fromJSON(object.items) : undefined,
    };
  },

  toJSON(message: RecordPurchaseUpdateRequest): unknown {
    const obj: any = {};
    if (message.companyId !== 0) {
      obj.companyId = Math.round(message.companyId);
    }
    if (message.purchaseId !== 0) {
      obj.purchaseId = Math.round(message.purchaseId);
    }
    if (message.items !== undefined) {
      obj.items = ItemsInPurchaseUpdate.toJSON(message.items);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordPurchaseUpdateRequest>, I>>(base?: I): RecordPurchaseUpdateRequest {
    return RecordPurchaseUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordPurchaseUpdateRequest>, I>>(object: I): RecordPurchaseUpdateRequest {
    const message = createBaseRecordPurchaseUpdateRequest();
    message.companyId = object.companyId ?? 0;
    message.purchaseId = object.purchaseId ?? 0;
    message.items = (object.items !== undefined && object.items !== null)
      ? ItemsInPurchaseUpdate.fromPartial(object.items)
      : undefined;
    return message;
  },
};

export type InventoryServiceService = typeof InventoryServiceService;
export const InventoryServiceService = {
  recordSale: {
    path: "/inventory_service.InventoryService/recordSale",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RecordSaleRequest) => Buffer.from(RecordSaleRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RecordSaleRequest.decode(value),
    responseSerialize: (value: MessageResponse) => Buffer.from(MessageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MessageResponse.decode(value),
  },
  recordPurchase: {
    path: "/inventory_service.InventoryService/recordPurchase",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RecordPurchaseRequest) => Buffer.from(RecordPurchaseRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RecordPurchaseRequest.decode(value),
    responseSerialize: (value: MessageResponse) => Buffer.from(MessageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MessageResponse.decode(value),
  },
  recordSaleUpdate: {
    path: "/inventory_service.InventoryService/recordSaleUpdate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RecordSaleUpdateRequest) => Buffer.from(RecordSaleUpdateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RecordSaleUpdateRequest.decode(value),
    responseSerialize: (value: MessageResponse) => Buffer.from(MessageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MessageResponse.decode(value),
  },
  recordPurchaseUpdate: {
    path: "/inventory_service.InventoryService/recordPurchaseUpdate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RecordPurchaseUpdateRequest) =>
      Buffer.from(RecordPurchaseUpdateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RecordPurchaseUpdateRequest.decode(value),
    responseSerialize: (value: MessageResponse) => Buffer.from(MessageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MessageResponse.decode(value),
  },
} as const;

export interface InventoryServiceServer extends UntypedServiceImplementation {
  recordSale: handleUnaryCall<RecordSaleRequest, MessageResponse>;
  recordPurchase: handleUnaryCall<RecordPurchaseRequest, MessageResponse>;
  recordSaleUpdate: handleUnaryCall<RecordSaleUpdateRequest, MessageResponse>;
  recordPurchaseUpdate: handleUnaryCall<RecordPurchaseUpdateRequest, MessageResponse>;
}

export interface InventoryServiceClient extends Client {
  recordSale(
    request: RecordSaleRequest,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  recordSale(
    request: RecordSaleRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  recordSale(
    request: RecordSaleRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  recordPurchase(
    request: RecordPurchaseRequest,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  recordPurchase(
    request: RecordPurchaseRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  recordPurchase(
    request: RecordPurchaseRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  recordSaleUpdate(
    request: RecordSaleUpdateRequest,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  recordSaleUpdate(
    request: RecordSaleUpdateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  recordSaleUpdate(
    request: RecordSaleUpdateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  recordPurchaseUpdate(
    request: RecordPurchaseUpdateRequest,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  recordPurchaseUpdate(
    request: RecordPurchaseUpdateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  recordPurchaseUpdate(
    request: RecordPurchaseUpdateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
}

export const InventoryServiceClient = makeGenericClientConstructor(
  InventoryServiceService,
  "inventory_service.InventoryService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): InventoryServiceClient;
  service: typeof InventoryServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
